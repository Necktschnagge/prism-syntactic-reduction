# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - '*'
    exclude:
    - artifacts


jobs:
 - job: Cloud
   strategy:
     matrix:
       ubuntu_20_04:
         imageName: 'ubuntu-20.04'
         the_name: 'Azure Pipelines'
   
   #    ubuntu_18_04_gcc_8:
   #      imageName: 'ubuntu-18.04'
   #      CC: gcc-8
   #      CXX: g++-8
   #      the_name: 'Azure Pipelines'
   
   #    ubuntu_16_04_gcc_8:
   #      imageName: 'ubuntu-16.04'
   #      CC: gcc-8
   #      CXX: g++-8
   #      the_name: 'Azure Pipelines'
   
       mac_10_15:
         imageName: 'macos-10.15'
         the_name: 'Azure Pipelines'
   #    mac_10_14:
   #      imageName: 'macos-10.14'
   #      the_name: 'Azure Pipelines'
   
       windows_2019:
         imageName: 'windows-2019'
         the_name: 'Azure Pipelines'
   #    windows_2016:
   #      imageName: 'vs2017-win2016'
   #      the_name: 'Azure Pipelines'
   
   pool:
     vmImage: $(imageName)
     name: $(the_name)
   condition: false
   steps:
    - script: git submodule update --init --recursive
      displayName: "Init Git Submodules"
      condition: succeeded()
    - script: sudo apt-get install libboost-all-dev
      displayName: "Linux: Install Boost"
      condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux' ))
    - script: brew install boost
      displayName: "Mac: Install Boost"
      condition: and(succeeded(), eq( variables['Agent.OS'], 'Darwin' ))
#    - script: |
#       dir C:\hostedtoolcache\windows\Boost\
#       echo %BOOST_ROOT%
#      displayName: "Debug"
#    - script: vcpkg install boost:x86-windows
#      displayName: "Windows: Install Boost"
#      condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT'))
    - script: .\extern\boost-ci\ci\azure-pipelines\install.bat
      displayName: "Windows: Install Boost"
      condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT'))
    - script: cmake -S . -B ./build/ 
      displayName: "CMake: Create Project"
      condition: succeeded()
    - script: cmake --build ./build
      displayName: "CMake: Compile and Link"
      condition: succeeded()
    - script: ./build/test/TEST-Syntactic-Reducer
      displayName: "Run Tests on Linux / Mac OS"
      condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
    - script: .\build\test\Debug\TEST-Syntactic-Reducer.exe
      displayName: "Run Tests on Windows"
      condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
   # - script: |
   #     rm -r /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64
   #     sudo apt-get install openjdk-8-jdk-headless
   #   displayName: 'Linux: Install Java and uninstall old versions'
   #   condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux' ))
   # - script: |
   #     ls /usr/lib/jvm/
   #     javac -version
   #     cd prism-sttt17/prism/
   #     make JAVA_DIR=/usr/lib/jvm/java-8-openjdk-amd64
   #   displayName: 'make prism'
   #   condition: succeeded()
   # - script: |
   #     cd prism-sttt17/prism/bin/
   #     ls -la
   #     chmod +x ./prism
   #     ./prism '../../../Examples/ireduce/in_family.prism' -pf 'filter(printall, Pmax=? [ F{reward{"rounds"}<=10} (failure) ], "init")' -mtbdd -cuddmaxmem 2g
   #   displayName: 'Check original in_family.prism'
   #   condition: succeeded()
   
 - job: Prism_Cloud
   strategy:
     matrix:
       ubuntu_20_04:
         imageName: 'ubuntu-20.04'
         the_name: 'Azure Pipelines'
   pool:
     vmImage: $(imageName)
     name: $(the_name)
   
   #condition: false
   
   steps:
    - script: ls /usr/lib/jvm/
      displayName: "check Java install directory"
      condition: succeeded()
    - script: sudo rm -r /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64
      displayName: "Remove Java 11"
      condition: succeeded()
    - script: sudo apt-get install -y openjdk-8-jdk
      displayName: "Install custom Java version"
      condition: succeeded()
    - script: javac -version
      displayName: "Check Java version"
      condition: succeeded()
    - script: cd prism-sttt17/prism/ && make JAVA_DIR=/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64
      displayName: "Build prism"
      condition: succeeded()
    - script: mv prism-sttt17/ ../dumped ### override existing files or not?
      displayName: "Move binaries"
      condition: succeeded()
    - script: git checkout artifacts --
      displayName: "git: checkout artifacts"
      condition: succeeded()
    - script: mv ../dumped artifacts/prism-sttt17/ ### override existing files or not?
      displayName: "Move binaries"
      condition: succeeded()
    - script: git add artifacts/* 
      displayName: "git: Stage changes"
      condition: succeeded()
    - script: git status
      displayName: "git: status"
      condition: succeeded()
    - script: git -c user.name="CI Agent" -c user.email="ci-agent@example.org" commit -m "prism binaries"
      displayName: "Commit binaries"
      condition: succeeded()
    - script: git push https://$(USER_NAME):$(PERSONAL_ACCESS_TOKEN)@github.com/$(echo "$(git remote get-url origin)" | sed -E 's/https:\/\/\w*.\w*\///' | sed -E 's/\.git//') ${git_branch_artifacts} 
      displayName: "git: push binaries."
      condition: succeeded()
   
   
   
 - job: Self_Hosted
   strategy:
     matrix:
       Ubuntu 20.04:
         the_name: 'Performance'
   
   pool:
     vmImage: $(imageName)
     name: $(the_name)
   timeoutInMinutes: 600
   steps:
    - script: git submodule update --init --recursive
      displayName: "Init Git Submodules"
      condition: succeeded()
    - script: cmake -S . -B ./build/ 
      displayName: "CMake: Create Project"
      condition: succeeded()
    - script: cmake --build ./build
      displayName: "CMake: Compile and Link"
      condition: succeeded()
    - script: ./build/test/TEST-Syntactic-Reducer
      displayName: "Run Tests on Linux / Mac OS"
      condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
    - script: .\build\test\Debug\TEST-Syntactic-Reducer.exe
      displayName: "Run Tests on Windows"
      condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
    - script: ls ./build/bin
      displayName: "Run on Linux / Mac OS"
      condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
    - script: ls ./build/src
      displayName: "Run on Linux / Mac OS"
      condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
    - script: |
        ls /usr/lib/jvm/
        javac -version
        cd prism-sttt17/prism/
        make JAVA_DIR=/usr/lib/jvm/java-8-openjdk-amd64
      displayName: 'make prism'
      condition: succeeded()
    - script: |
        cd prism-sttt17/prism/bin/
        ls -la
        chmod +x ./prism
        ./prism '../../../Examples/ireduce/in_family.prism' -pf 'filter(printall, Pmax=? [ F{reward{"rounds"}<=10} (failure) ], "init")' -mtbdd -cuddmaxmem 10g
      displayName: 'Check original in_family.prism'
      condition: succeeded()
    - script: |
        cd prism-sttt17/prism/bin/
        ls -la
        chmod +x ./prism
        ./prism '../../../build/ireduce/in_family.prism' -pf 'filter(printall, Pmax=? [ F{reward{"rounds"}<=10} (failure) ], "init")' -mtbdd -cuddmaxmem 10g
      displayName: 'Check original in_family.prism'
      condition: succeeded()
      
      