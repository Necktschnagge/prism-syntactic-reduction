# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - '*'
    exclude:
    - artifacts


jobs:
 - job: Cloud
   strategy:
     matrix:
#       ubuntu_20_04:
#         imageName: 'ubuntu-20.04'
#         the_name: 'Azure Pipelines'
   
   #    ubuntu_18_04_gcc_8:
   #      imageName: 'ubuntu-18.04'
   #      CC: gcc-8
   #      CXX: g++-8
   #      the_name: 'Azure Pipelines'
   
   #    ubuntu_16_04_gcc_8:
   #      imageName: 'ubuntu-16.04'
   #      CC: gcc-8
   #      CXX: g++-8
   #      the_name: 'Azure Pipelines'
   
       mac_10_15:
         imageName: 'macos-10.15'
         the_name: 'Azure Pipelines'
   #    mac_10_14:
   #      imageName: 'macos-10.14'
   #      the_name: 'Azure Pipelines'
   
#       windows_2019:
#         imageName: 'windows-2019'
#         the_name: 'Azure Pipelines'
   #    windows_2016:
   #      imageName: 'vs2017-win2016'
   #      the_name: 'Azure Pipelines'
   
   pool:
     vmImage: $(imageName)
     name: $(the_name)
   
   steps:
    - script: git submodule update --init --recursive
      displayName: "Init Git Submodules"
      condition: succeeded()
    - script: sudo apt-get install libboost-all-dev
      displayName: "Linux: Install Boost"
      condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux' ))
    - script: brew install boost
      displayName: "Mac: Install Boost"
      condition: and(succeeded(), eq( variables['Agent.OS'], 'Darwin' ))
#    - script: |
#       dir C:\hostedtoolcache\windows\Boost\
#       echo %BOOST_ROOT%
#      displayName: "Debug"
#    - script: vcpkg install boost:x86-windows
#      displayName: "Windows: Install Boost"
#      condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT'))
    - script: .\extern\boost-ci\ci\azure-pipelines\install.bat
      displayName: "Windows: Install Boost"
      condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT'))
    - script: cmake -S . -B ./build/ 
      displayName: "CMake: Create Project"
      condition: succeeded()
    - script: cmake --build ./build
      displayName: "CMake: Compile and Link"
      condition: succeeded()
    - script: ./build/test/TEST-Syntactic-Reducer
      displayName: "Run Tests on Linux / Mac OS"
      condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
    - script: .\build\test\Debug\TEST-Syntactic-Reducer.exe
      displayName: "Run Tests on Windows"
      condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
   # - script: |
   #     rm -r /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64
   #     sudo apt-get install openjdk-8-jdk-headless
   #   displayName: 'Linux: Install Java and uninstall old versions'
   #   condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux' ))
   # - script: |
   #     ls /usr/lib/jvm/
   #     javac -version
   #     cd prism-sttt17/prism/
   #     make JAVA_DIR=/usr/lib/jvm/java-8-openjdk-amd64
   #   displayName: 'make prism'
   #   condition: succeeded()
   # - script: |
   #     cd prism-sttt17/prism/bin/
   #     ls -la
   #     chmod +x ./prism
   #     ./prism '../../../Examples/ireduce/in_family.prism' -pf 'filter(printall, Pmax=? [ F{reward{"rounds"}<=10} (failure) ], "init")' -mtbdd -cuddmaxmem 2g
   #   displayName: 'Check original in_family.prism'
   #   condition: succeeded()
 - job: Self_Hosted
   strategy:
     matrix:
       Ubuntu 20.04:
         the_name: 'Performance'
   
   pool:
     vmImage: $(imageName)
     name: $(the_name)
   timeoutInMinutes: 600
   steps:
    - script: git submodule update --init --recursive
      displayName: "Init Git Submodules"
      condition: succeeded()
    - script: cmake -S . -B ./build/ 
      displayName: "CMake: Create Project"
      condition: succeeded()
    - script: cmake --build ./build
      displayName: "CMake: Compile and Link"
      condition: succeeded()
    - script: ./build/test/TEST-Syntactic-Reducer
      displayName: "Run Tests on Linux / Mac OS"
      condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
    - script: .\build\test\Debug\TEST-Syntactic-Reducer.exe
      displayName: "Run Tests on Windows"
      condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
#    - script: chmod +x ./build/src/Syntactic-Reducer
#      displayName: "chmod +x"
#      condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))

    - script: ./build/src/Syntactic-Reducer ./Examples/debug/in_family.prism
      displayName: "Run on Linux / Mac OS"
      condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
    - script: cat reduced_model.prism
      displayName: "Show reduced file"
      condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
    - script: mv reduced_model.prism artifacts/reduced_in_family.prism
      displayName: "Move in_family artifact"
      
    #- script: cat ./Examples/debug/bsp.prism

    - script: ./build/src/Syntactic-Reducer ./Examples/debug/bsp.prism
      displayName: "Run on Linux / Mac OS"
      condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
    - script: cat reduced_model.prism
      displayName: "Show reduced file"
      condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
    - script: mv reduced_model.prism artifacts/reduced_bsp.prism
      displayName: "Move bsp artifact"

    - script: ./build/src/Syntactic-Reducer ./Examples/rewrite_model1_probs_re.pmc
      displayName: "Run on Linux / Mac OS"
      condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
    - script: cat reduced_model.prism
      displayName: "Show reduced file"
      condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
    - script: mv reduced_model.prism artifacts/reduced_rewrite_model1_probs_re.pmc
      displayName: "Move model1_probs_re artifact"
      
      
    - script: |
        ls /usr/lib/jvm/
        javac -version
        cd prism-sttt17/prism/
        make JAVA_DIR=/usr/lib/jvm/java-8-openjdk-amd64
        chmod +x ./bin/prism
      displayName: 'make prism'
      condition: succeeded()
      
    - script: |
        cd prism-sttt17/prism/bin/
        ls -la
        ./prism '../../../artifacts/reduced_rewrite_model1_probs_re.pmc' -pf 'filter(printall, Pmax=? [ F<100 "deadlock" ], "init")' -mtbdd -cuddmaxmem 10g
      displayName: 'Check reduced rewrite_model1_probs_re.pmc'
      condition: succeeded()
    - script: |
        cd prism-sttt17/prism/bin/
        ls -la
        ./prism '../../../Examples/rewrite_model1_probs_re.pmc' -pf 'filter(printall, Pmax=? [ F<100 "deadlock" ], "init")' -mtbdd -cuddmaxmem 10g
      displayName: 'Check original rewrite_model1_probs_re.pmc'
      condition: succeeded()
    - script: |
        cd prism-sttt17/prism/bin/
        ls -la
        ./prism '../../../Examples/manually_fixed_reduced_rewrite_model1_probs_re.pmc' -pf 'filter(printall, Pmax=? [ F<100 "deadlock" ], "init")' -mtbdd -cuddmaxmem 10g
      displayName: 'Check manually fixed reduced rewrite_model1_probs_re.pmc'
      condition: succeeded()
      
    - script: |
        cd prism-sttt17/prism/bin/
        ls -la
        ./prism '../../../artifacts/reduced_bsp.prism' -pf 'filter(printall, Pmax=? [ F<100 "deadlock" ], "init")' -mtbdd -cuddmaxmem 10g
      displayName: 'Check reduced bsp.prism'
      condition: succeeded()
    - script: |
        cd prism-sttt17/prism/bin/
        ls -la
        ./prism '../../../Examples/debug/bsp.prism' -pf 'filter(printall, Pmax=? [ F<100 "deadlock" ], "init")' -mtbdd -cuddmaxmem 10g
      displayName: 'Check original bsp.prism'
      condition: succeeded()
      
    - script: |
        cd prism-sttt17/prism/bin/
        ls -la
        ./prism '../../../artifacts/reduced_in_family.prism' -pf 'filter(printall, Pmax=? [ F{reward{"rounds"}<=10} (failure) ], "init")' -mtbdd -cuddmaxmem 10g
      displayName: 'Check reduced in_family.prism'
      condition: succeeded()
    - script: |
        cd prism-sttt17/prism/bin/
        ls -la
        ./prism '../../../Examples/ireduce/in_family.prism' -pf 'filter(printall, Pmax=? [ F{reward{"rounds"}<=10} (failure) ], "init")' -mtbdd -cuddmaxmem 10g
      displayName: 'Check original in_family.prism'
      condition: succeeded()
      
      